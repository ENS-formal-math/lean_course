import Mathlib.Data.Nat.Notation
import Mathlib.Algebra.Group.Defs
import Mathlib.Algebra.Ring.Defs
import Mathlib.Order.Defs
import Mathlib.Algebra.Ring.Int
import Mathlib.Data.SetLike.Basic
import Mathlib.Algebra.Module.Defs
import Mathlib.Algebra.Group.Submonoid.Basic
import Mathlib.Tactic

-- Here we discuss how to build hierarchy of algebraic structures --

--This is just a class for a type containing a distinguished element one --
class One‚ÇÅ (Œ± : Type) where
  /-- The element one -/
  one : Œ±

@[inherit_doc]
notation "ùüô" => One‚ÇÅ.one

example (Œ± : Type) [One‚ÇÅ Œ±] : (One‚ÇÅ.one : Œ±) = ùüô := by rfl

instance : One‚ÇÅ ‚Ñï where
  one := 1

example : ùüô = 1 := by rfl

-- Next we define a binary operation --
class Dia‚ÇÅ (Œ± : Type) where
  dia : Œ± ‚Üí Œ± ‚Üí Œ±

infixl:70 " ‚ãÑ "   => Dia‚ÇÅ.dia

-- Suppose we want to define a semigroup that has an associative binary operation --
class Semigroup‚ÇÅ (Œ± : Type) where
  toDia‚ÇÅ : Dia‚ÇÅ Œ±
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

-- example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b --
/-
If you uncomment, you're going to get an error:
  failed to synthesize Dia‚ÇÅ Œ±

The problem is that we didn't tell that Semigroup also holds Dia‚ÇÅ,
so we need to add it
-/

/-
example {Œ± : Type} [Dia‚ÇÅ Œ±] [Semigroup‚ÇÅ Œ±] (a b c : Œ±) :
    a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c) := by
  apply Semigroup‚ÇÅ.dia_assoc
-/

/-
If you uncomment, then the problem is that operation from
[Dia‚ÇÅ Œ±] instance and [Semigroup‚ÇÅ Œ±] are different, so we can't
unify them.

Hopefully, we can solve this mess by declaring that we synthesise
Dia‚ÇÅ in Semigroup‚ÇÅ as
-/

attribute [instance] Semigroup‚ÇÅ.toDia‚ÇÅ

example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b c : Œ±) :
    a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c) := by
  apply Semigroup‚ÇÅ.dia_assoc

/-
But this is still cumbersome because we need to define instance
attributes each time. Instead, use keyword `extends`
-/

class Semigroup‚ÇÇ (Œ± : Type) extends Dia‚ÇÅ Œ± where
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

example {Œ± : Type} [Semigroup‚ÇÇ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

-- We can extend from two classes --
class DiaOneClass‚ÇÅ (Œ± : Type) extends One‚ÇÅ Œ±, Dia‚ÇÅ Œ± where
  /-- One is a left neutral element for diamond. -/
  one_dia : ‚àÄ a : Œ±, ùüô ‚ãÑ a = a
  /-- One is a right neutral element for diamond -/
  dia_one : ‚àÄ a : Œ±, a ‚ãÑ ùüô = a

-- We can just extend --
class Monoid‚ÇÅ (Œ± : Type) extends Semigroup‚ÇÅ Œ±, DiaOneClass‚ÇÅ Œ±

class Monoid‚ÇÇ (Œ± : Type) [Semigroup‚ÇÅ Œ±] extends DiaOneClass‚ÇÅ Œ±

class AddSemigroup‚ÇÉ (Œ± : Type) extends Add Œ± where
/-- Addition is associative -/
  add_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a + b + c = a + (b + c)

export AddSemigroup‚ÇÉ (add_assoc‚ÇÉ)

@[to_additive AddSemigroup‚ÇÉ]
class Semigroup‚ÇÉ (Œ± : Type) extends Mul Œ± where
/-- Multiplication is associative -/
  mul_assoc‚ÇÉ : ‚àÄ a b c : Œ±, a * b * c = a * (b * c)

export Semigroup‚ÇÉ (mul_assoc‚ÇÉ)

class AddMonoid‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ±, AddZeroClass Œ±

@[to_additive AddMonoid‚ÇÉ]
class Monoid‚ÇÉ (Œ± : Type) extends Semigroup‚ÇÉ Œ±, MulOneClass Œ±

class AddCommSemigroup‚ÇÉ (Œ± : Type) extends AddSemigroup‚ÇÉ Œ± where
  add_comm : ‚àÄ a b : Œ±, a + b = b + a

class AddCommMonoid‚ÇÉ (Œ± : Type) extends AddMonoid‚ÇÉ Œ±, AddCommSemigroup‚ÇÉ Œ±

class AddGroup‚ÇÉ (G : Type) extends AddMonoid‚ÇÉ G, Neg G where
  neg_add : ‚àÄ a : G, -a + a = 0

class AddCommGroup‚ÇÉ (G : Type) extends AddGroup‚ÇÉ G, AddCommMonoid‚ÇÉ G

class Ring‚ÇÉ (R : Type) extends AddGroup‚ÇÉ R, Monoid‚ÇÉ R, MulZeroClass R where
  /-- Multiplication is left distributive over addition -/
  left_distrib : ‚àÄ a b c : R, a * (b + c) = a * b + a * c
  /-- Multiplication is right distributive over addition -/
  right_distrib : ‚àÄ a b c : R, (a + b) * c = a * c + b * c

/- Prove this! -/
instance {R : Type} [Ring‚ÇÉ R] : AddCommGroup‚ÇÉ R :=
{ Ring‚ÇÉ.toAddGroup‚ÇÉ with
  add_comm := by
    sorry }

instance : Ring‚ÇÉ ‚Ñ§ where
  add := (¬∑ + ¬∑)
  add_assoc‚ÇÉ := add_assoc
  zero := 0
  zero_add := by simp
  add_zero := by simp
  neg := (- ¬∑)
  neg_add := by simp
  mul := (¬∑ * ¬∑)
  mul_assoc‚ÇÉ := mul_assoc
  one := 1
  one_mul := by simp
  mul_one := by simp
  zero_mul := by simp
  mul_zero := by simp
  left_distrib := Int.mul_add
  right_distrib := Int.add_mul

-- Now we discuss how to define classes with multiple types --

class SMul‚ÇÉ (Œ± : Type) (Œ≤ : Type) where
  /-- Scalar multiplication -/
  smul : Œ± ‚Üí Œ≤ ‚Üí Œ≤

infixr:73 " ‚Ä¢ " => SMul‚ÇÉ.smul

-- Define module over a ring --
class Module‚ÇÅ (R : Type) [Ring‚ÇÉ R] (M : Type) [AddCommGroup‚ÇÉ M] extends SMul‚ÇÉ R M where
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0
  one_smul : ‚àÄ m : M, (1 : R) ‚Ä¢ m = m
  mul_smul : ‚àÄ (a b : R) (m : M), (a * b) ‚Ä¢ m = a ‚Ä¢ b ‚Ä¢ m
  add_smul : ‚àÄ (a b : R) (m : M), (a + b) ‚Ä¢ m = a ‚Ä¢ m + b ‚Ä¢ m
  smul_add : ‚àÄ (a : R) (m n : M), a ‚Ä¢ (m + n) = a ‚Ä¢ m + a ‚Ä¢ n

/-
class Module‚ÇÇ (R : Type) [Ring R] (M : Type) extends SMul‚ÇÉ R M, AddCommGroup M where
  zero_smul : ‚àÄ m : M, (0 : R) ‚Ä¢ m = 0
  one_smul : ‚àÄ m : M, (1 : R) ‚Ä¢ m = m
  mul_smul : ‚àÄ (a b : R) (m : M), (a * b) ‚Ä¢ m = a ‚Ä¢ b ‚Ä¢ m
  add_smul : ‚àÄ (a b : R) (m : M), (a + b) ‚Ä¢ m = a ‚Ä¢ m + b ‚Ä¢ m
  smul_add : ‚àÄ (a : R) (m n : M), a ‚Ä¢ (m + n) = a ‚Ä¢ m + a ‚Ä¢ n

Note that if we uncomment block above, we will get an error. The problem is that
AddCommGroup M instance is going to be part of Module‚ÇÇ R M instance and we won't
be able to infer type R from AddCommGroup M.

The rule is to extend from classes that have all type parameters like SMul‚ÇÉ R M
-/

-- Let's define an instances of the module - ring over itself --
instance selfModule (R : Type) [Ring‚ÇÉ R] : Module‚ÇÅ R R where
  smul := fun r s ‚Ü¶ r*s
  zero_smul := zero_mul
  one_smul := one_mul
  mul_smul := mul_assoc‚ÇÉ
  add_smul := Ring‚ÇÉ.right_distrib
  smul_add := Ring‚ÇÉ.left_distrib

-- Another instance is an abelian group over ‚Ñ§ --

def nsmul‚ÇÅ [Zero M] [Add M] : ‚Ñï ‚Üí M ‚Üí M
  | 0, _ => 0
  | n + 1, a => a + nsmul‚ÇÅ n a

def zsmul‚ÇÅ {M : Type*} [Zero M] [Add M] [Neg M] : ‚Ñ§ ‚Üí M ‚Üí M
  | Int.ofNat n, a => nsmul‚ÇÅ n a
  | Int.negSucc n, a => -nsmul‚ÇÅ n.succ a

instance abGrpModule (A : Type) [AddCommGroup‚ÇÉ A] : Module‚ÇÅ ‚Ñ§ A where
  smul := zsmul‚ÇÅ
  zero_smul := sorry
  one_smul := sorry
  mul_smul := sorry
  add_smul := sorry
  smul_add := sorry

-- The problem is that now Module‚ÇÅ ‚Ñ§ ‚Ñ§ is ambiguous --
#synth Module‚ÇÅ ‚Ñ§ ‚Ñ§

/-
The solution is to define data needed to define Module‚ÇÅ ‚Ñ§ A
inside AddMonoid A from the start

General rule: when going from rich (Module R M)
to poor structure (Module ‚Ñ§ M) never define, but forget
-/

#check AddMonoid

#synth Module ‚Ñ§ ‚Ñ§

variable (R: Type) [Ring R]
#synth Module R R

class AddMonoid‚ÇÑ (M : Type) extends AddSemigroup‚ÇÉ M, AddZeroClass M where
  /-- Multiplication by a natural number. -/
  nsmul : ‚Ñï ‚Üí M ‚Üí M := nsmul‚ÇÅ
  /-- Multiplication by `(0 : ‚Ñï)` gives `0`. -/
  nsmul_zero : ‚àÄ x, nsmul 0 x = 0 := by intros; rfl
  /-- Multiplication by `(n + 1 : ‚Ñï)` behaves as expected. -/
  nsmul_succ : ‚àÄ (n : ‚Ñï) (x), nsmul (n + 1) x = x + nsmul n x := by intros; rfl

instance mySMul {M : Type} [AddMonoid‚ÇÑ M] : SMul ‚Ñï M := ‚ü®AddMonoid‚ÇÑ.nsmul‚ü©

instance (M N : Type) [AddMonoid‚ÇÑ M] [AddMonoid‚ÇÑ N] : AddMonoid‚ÇÑ (M √ó N) where
  add := fun p q ‚Ü¶ (p.1 + q.1, p.2 + q.2)
  add_assoc‚ÇÉ := fun a b c ‚Ü¶ by ext <;> apply add_assoc‚ÇÉ
  zero := (0, 0)
  zero_add := fun a ‚Ü¶ by ext <;> apply zero_add
  add_zero := fun a ‚Ü¶ by ext <;> apply add_zero

-- Morphisms --
structure isMonoidHom‚ÇÇ [Monoid G] [Monoid H] (f : G ‚Üí H) : Prop where
  map_one : f 1 = 1
  map_mul : ‚àÄ g g', f (g * g') = f g * f g'

-- morphism = bundled function + axioms
@[ext]
structure MonoidHom‚ÇÅ (G H : Type) [Monoid G] [Monoid H]  where
  toFun : G ‚Üí H
  map_one : toFun 1 = 1
  map_mul : ‚àÄ g g', toFun (g * g') = toFun g * toFun g'

-- Coercion --
instance [Monoid G] [Monoid H] : CoeFun (MonoidHom‚ÇÅ G H) (fun _ ‚Ü¶ G ‚Üí H) where
  coe := MonoidHom‚ÇÅ.toFun

attribute [coe] MonoidHom‚ÇÅ.toFun

example [Monoid G] [Monoid H] (f : MonoidHom‚ÇÅ G H) : f 1 = 1 :=  f.map_one

-- Define Ring morphism --

@[ext]
structure AddMonoidHom‚ÇÅ (G H : Type) [AddMonoid G] [AddMonoid H]  where
  toFun : G ‚Üí H
  map_zero : toFun 0 = 0
  map_add : ‚àÄ g g', toFun (g + g') = toFun g + toFun g'

instance [AddMonoid G] [AddMonoid H] : CoeFun (AddMonoidHom‚ÇÅ G H) (fun _ ‚Ü¶ G ‚Üí H) where
  coe := AddMonoidHom‚ÇÅ.toFun

attribute [coe] AddMonoidHom‚ÇÅ.toFun

@[ext]
structure RingHom‚ÇÅ (R S : Type) [Ring R] [Ring S] extends MonoidHom‚ÇÅ R S, AddMonoidHom‚ÇÅ R S

/-
When there are several monoid-like morphisms (monoids, rings),
we would like to have same lemmas for them

The way is to define abstract MonoidHomClass
-/
class MonoidHomClass‚ÇÅ (F : Type) (M N : Type) [Monoid M] [Monoid N] where
  toFun : F ‚Üí M ‚Üí N
  map_one : ‚àÄ f : F, toFun f 1 = 1
  map_mul : ‚àÄ f g g', toFun f (g * g') = toFun f g * toFun f g'

/-
def badInst [Monoid M] [Monoid N] [MonoidHomClass‚ÇÅ F M N] : CoeFun F (fun _ ‚Ü¶ M ‚Üí N) where
  coe := MonoidHomClass‚ÇÅ.toFun

bad coercion instance : Lean needs to simultaneously infer F M N, while
M and N can be clearly extracted from F
-/

class MonoidHomClass‚ÇÇ (F : Type) (M N : outParam Type) [Monoid M] [Monoid N] where
  toFun : F ‚Üí M ‚Üí N
  map_one : ‚àÄ f : F, toFun f 1 = 1
  map_mul : ‚àÄ f g g', toFun f (g * g') = toFun f g * toFun f g'

instance [Monoid M] [Monoid N] [MonoidHomClass‚ÇÇ F M N] : CoeFun F (fun _ ‚Ü¶ M ‚Üí N) where
  coe := MonoidHomClass‚ÇÇ.toFun

attribute [coe] MonoidHomClass‚ÇÇ.toFun

instance (M N : Type) [Monoid M] [Monoid N] : MonoidHomClass‚ÇÇ (MonoidHom‚ÇÅ M N) M N where
  toFun := MonoidHom‚ÇÅ.toFun
  map_one := fun f ‚Ü¶ f.map_one
  map_mul := fun f ‚Ü¶ f.map_mul

instance (R S : Type) [Ring R] [Ring S] : MonoidHomClass‚ÇÇ (RingHom‚ÇÅ R S) R S where
  toFun := fun f ‚Ü¶ f.toMonoidHom‚ÇÅ.toFun
  map_one := fun f ‚Ü¶ f.toMonoidHom‚ÇÅ.map_one
  map_mul := fun f ‚Ü¶ f.toMonoidHom‚ÇÅ.map_mul

-- Now we can apply abstract lemma --
lemma map_inv_of_inv [Monoid M] [Monoid N] [MonoidHomClass‚ÇÇ F M N] (f : F) {m m' : M} (h : m*m' = 1) :
    f m * f m' = 1 := by
  rw [‚Üê MonoidHomClass‚ÇÇ.map_mul, h, MonoidHomClass‚ÇÇ.map_one]

example [Monoid M] [Monoid N] (f : MonoidHom‚ÇÅ M N) {m m' : M} (h : m*m' = 1) : f m * f m' = 1 :=
map_inv_of_inv f h

example [Ring R] [Ring S] (f : RingHom‚ÇÅ R S) {r r' : R} (h : r*r' = 1) : f r * f r' = 1 :=
map_inv_of_inv f h

-- Substructure --

@[ext]
structure Submonoid‚ÇÅ (M : Type) [Monoid M] where
  /-- The carrier of a submonoid. -/
  carrier : Set M
  /-- The product of two elements of a submonoid belongs to the submonoid. -/
  mul_mem {a b} : a ‚àà carrier ‚Üí b ‚àà carrier ‚Üí a * b ‚àà carrier
  /-- The unit element belongs to the submonoid. -/
  one_mem : 1 ‚àà carrier

/-- Submonoids in `M` can be seen as sets in `M`. -/
instance [Monoid M] : SetLike (Submonoid‚ÇÅ M) M where
  coe := Submonoid‚ÇÅ.carrier
  coe_injective' _ _ := Submonoid‚ÇÅ.ext

/-
Since N is SetLike, there's a coercion and (x : N) means
the subtype {x : M // x ‚àà N}. The same happens for any Set M,
it's not unique to Submonoid M only.
-/
example [Monoid M] (N : Submonoid‚ÇÅ M) (x : N) : (x : M) ‚àà N := x.property

-- Let's equip the submonoid with monoid class instance --
instance SubMonoid‚ÇÅMonoid [Monoid M] (N : Submonoid‚ÇÅ M) : Monoid N where
  mul := fun ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© ‚Ü¶ ‚ü®x*y, N.mul_mem hx hy‚ü©
  /-
  We can prove that m‚ÇÅ := x * (y * z) and m‚ÇÇ := (x * y) * z in M
  Thus, these elements are equal in N also because proofs are definitionally equal
  m‚ÇÅ = m‚ÇÇ ‚Üí ‚ü®m‚ÇÅ, p m‚ÇÅ‚ü© = ‚ü®m‚ÇÇ, p m‚ÇÇ‚ü©
  -/
  mul_assoc := fun ‚ü®x, _‚ü© ‚ü®y, _‚ü© ‚ü®z, _‚ü© ‚Ü¶ SetCoe.ext (mul_assoc x y z)
  one := ‚ü®1, N.one_mem‚ü©
  one_mul := fun ‚ü®x, _‚ü© ‚Ü¶ SetCoe.ext (one_mul x)
  mul_one := fun ‚ü®x, _‚ü© ‚Ü¶ SetCoe.ext (mul_one x)

/-
To apply lemmas about submonoids to subgroups we introduce
abstract class just like for monoid morphism and state
lemmas for it
-/
class SubmonoidClass‚ÇÅ (S : Type) (M : Type) [Monoid M] [SetLike S M] : Prop where
  mul_mem : ‚àÄ (s : S) {a b : M}, a ‚àà s ‚Üí b ‚àà s ‚Üí a * b ‚àà s
  one_mem : ‚àÄ s : S, 1 ‚àà s

instance [Monoid M] : SubmonoidClass‚ÇÅ (Submonoid‚ÇÅ M) M where
  mul_mem := Submonoid‚ÇÅ.mul_mem
  one_mem := Submonoid‚ÇÅ.one_mem

/-
Submonoids have a lattice structure: intersection as ‚äì
and closure of a union as ‚äî
-/
instance [Monoid M] : Inf (Submonoid‚ÇÅ M) :=
  ‚ü®fun S‚ÇÅ S‚ÇÇ ‚Ü¶
    { carrier := S‚ÇÅ ‚à© S‚ÇÇ
      one_mem := ‚ü®S‚ÇÅ.one_mem, S‚ÇÇ.one_mem‚ü©
      mul_mem := fun ‚ü®hx, hx'‚ü© ‚ü®hy, hy'‚ü© ‚Ü¶ ‚ü®S‚ÇÅ.mul_mem hx hy, S‚ÇÇ.mul_mem hx' hy'‚ü© }‚ü©

-- Quotient --

/- Setoid is just a relation and a proof that it's an equivalence -/
def Submonoid.Setoid [CommMonoid M] (N : Submonoid M) : Setoid M  where
  r := fun x y ‚Ü¶ ‚àÉ w ‚àà N, ‚àÉ z ‚àà N, x*w = y*z
  iseqv := {
    refl := fun x ‚Ü¶ ‚ü®1, N.one_mem, 1, N.one_mem, rfl‚ü©
    symm := fun ‚ü®w, hw, z, hz, h‚ü© ‚Ü¶ ‚ü®z, hz, w, hw, h.symm‚ü©
    trans := by
      intro x y z ‚ü®a, ha, b, hb, h‚ü© ‚ü®a', ha', b', hb', h'‚ü©
      use a * a', Submonoid.mul_mem N ha ha'
      use b * b', Submonoid.mul_mem N hb hb'
      rw [‚Üê mul_assoc, h, mul_assoc, mul_comm b, ‚Üê mul_assoc, h', mul_assoc, mul_comm b']
  }

-- Allows to write M ‚ß∏ (N : Submonoid M) --
instance [CommMonoid M] : HasQuotient M (Submonoid M) where
  quotient' := fun N ‚Ü¶ Quotient N.Setoid

def QuotientMonoid.mk [CommMonoid M] (N : Submonoid M) : M ‚Üí M ‚ß∏ N := Quotient.mk N.Setoid

instance [CommMonoid M] (N : Submonoid M) : Monoid (M ‚ß∏ N) where
  mul := Quotient.map‚ÇÇ' (¬∑ * ¬∑) (by
      -- introduce hypotheses that a ‚âÉ a' and b ‚âÉ b' defined at N.Setoid.r --
      intro a a' ‚ü®wa, hwa, za, hza, ha‚ü©
      intro b b' ‚ü®wb, hwb, zb, hzb, hb‚ü©
      simp
      -- now we prove that a * b ‚âÉ a' * b' --
      use wa * wb, Submonoid.mul_mem N hwa hwb
      use za * zb, Submonoid.mul_mem N hza hzb
      rw [‚Üê mul_assoc, mul_comm _ wa, ‚Üê mul_assoc, mul_comm wa, ha]
      rw [mul_assoc, hb, ‚Üê mul_assoc, mul_assoc a', mul_comm za, ‚Üê mul_assoc, ‚Üê mul_assoc]
  )
  mul_assoc := by
      sorry
  one := QuotientMonoid.mk N 1
  one_mul := by
      sorry
  mul_one := by
      sorry
